*----------------------------------------------------------*
*                                                          *
C         EXACT RIEMANN SOLVER                             *
C       FOR THE EULER EQUATIONS                            *
      IMPLICIT NONE
	    !Declaration of variables:
      INTEGER I, CELLS

      REAL GAMMA, G1, G2, G3, G4, G5, G6, G7, G8
      REAL DL, UL, PL, CL, DR, UR, PR, CR
 	    REAL DIAPH, DOMLEN, DS, DX, PM, MPA, PS, S
      REAL TIMEOUT, UM, US, XPOS
      COMMON /GAMMAS/ GAMMA, G1, G2, G3, G4, G5, G6, G7, G8
	    COMMON /STATES/ DL, UL, PL, CL, DR, UR, PR, CR

	    OPEN(UNIT = 1,FILE = 'exact.ini',STATUS = 'UNKNOWN')

	    !Initial data and parameters are read in
	  
	    READ(1, *)DOMLEN	! Domain length
	    READ(1, *)DIAPH 	! Initial discontinuity position
	    READ(1, *)CELLS 	! Number of computing cells
	    READ(1, *)GAMMA	! Ratio of specific heats
	    READ(1, *)TIMEOUT ! Output time
	    READ(1, *)DL		! Initial density on left state
	    READ(1, *)UL 		! Initial velocity on left state
	    READ(1, *)PL 		! Initial pressure on left state
	    READ(1, *)DR		! Initial density on right state
	    READ(1, *)UR		! Initial velocity on right state
	    READ(1, *)PR		! Initial pressure on right state
	    READ(1, *)MPA		! Normalising constant

	    CLOSE(1)

	    !Compute gamma related constants
	  
	    G1 = (GAMMA - 1.0) / (2.0 * GAMMA)
	    G2 = (GAMMA + 1.0) / (2.0 * GAMMA)
	    G3 = 2.0 * GAMMA / (GAMMA - 1.0)
	    G4 = 2.0 / (GAMMA - 1.0)
	    G5 = 2.0 / (GAMMA + 1.0)
	    G6 = (GAMMA - 1.0) / (GAMMA + 1.0)
	    G7 = (GAMMA - 1.0) / 2.0
	    G8 = GAMMA - 1.0

	    !Compute sound speeds

	    CL = SQRT(GAMMA * PL / DL)
	    CR = SQRT(GAMMA * PR / DR)

	    !The pressure positivity condition is tested for

	    IF(G4*(CL+CR).LE.(UR-UL))THEN
		    !The initial data is such that vaccum is generated.
		    !Program stopped
		    WRITE(6,*)
		    WRITE(6,*)'***Vacuum is generated by data***'
		    WRITE(6,*)'***Program stopped***'
		    WRITE(6,*)
		
		    STOP
      ENDIF

	    !Exact solution for pressure and velocity in star region is found

	    CALL STARPU(PM, UM, MPA)
	    DX = DOMLEN/REAL(CELLS)

	    !Complete solution at time TIMOUT is found

	    OPEN(UNIT = 2,FILE = 'exact.out',STATUS='UNKNOWN')

	    DO 10 I = 1, CELLS
		    XPOS = (REAL(I) - 0.5) * DX
		    S = (XPOS - DIAPH) / TIMEOUT

		    !Solution at point (X, T) = (XPOS - DIAPH, TIMEOUT) is found
		    CALL SAMPLE(PM, UM, S, DS, US, PS)
		    !Exact solution profiles are written to exact.out
		    WRITE(2, 20)XPOS, DS, US, PS/MPA, PS/DS/G8/MPA
10    CONTINUE
	    CLOSE(2)
20    FORMAT(5(F14.6, 2X))
	    END

      SUBROUTINE STARPU(P, U, MPA)
  
      IMPLICIT NONE
        
      ! Declaration of variables
        
      INTEGER I, NRITER
      REAL DL, UL, PL, CL, DR, UR, PR, CR
      REAL CHANGE, FL, FLD, FR, FRD, P, POLD, PSTART
      REAL TOLPRE, U, UDIFF, MPA 
  
      COMMON /STATES/ DL, UL, PL, CL, DR, UR, PR, CR
      DATA TOLPRE, NRITER/1.0E-06, 20/ 
        
      CALL GUESSP(PSTART)

      POLD = PSTART
      UDIFF = UR - UL

      WRITE(6,*) '----------------------------------------'
      WRITE(6,*)'   Iteration number      Change  '
      WRITE(6,*)'----------------------------------------'

      DO 10 I = 1, NRITER
        CALL PREFUN(FL, FLD, POLD, DL, PL, CL) 
        CALL PREFUN(FR, FRD, POLD, DR, PR, CR) 
        P = POLD - (FL + FR + UDIFF)/(FLD + FRD)
        CHANGE = 2.0*ABS((P - POLD)/(P + POLD))
        WRITE(6, 30)I, CHANGE
        IF(CHANGE.LE.TOLPRE)GOTO 20
        IF(P.LT.0.0)P = TOLPRE
        POLD = P 
10    CONTINUE
       
      WRITE(6,*)'Divergence in Newton-Raphson iteration'

20    CONTINUE
      ! Compute velocity in Star Region

      U = 0.5*(UL + UR + FR - FL)

      WRITE(6,*)'---------------------------------------'
      WRITE(6,*)'   Pressure        Velocity'
      WRITE(6,*)'---------------------------------------'
      WRITE(6,40)P/MPA, U
      WRITE(6,*)'---------------------------------------'

30    FORMAT(5X, I5,15X, F12.7)
40    FORMAT(2(F14.6, 5X))

      RETURN
      END
      
      SUBROUTINE GUESSP(PM)

      IMPLICIT NONE
      ! Declaration of variables
      REAL DL, UL, PL, CL, DR, UR, PR, CR
      REAL GAMMA, G1, G2, G3, G4, G5, G6, G7, G8
      REAL CUP, GEL, GER, PM, PMAX, PMIN, PPV, PQ
      REAL PTL, PTR, QMAX, QUSER, UM

      COMMON /GAMMAS/ GAMMA, G1, G2, G3, G4, G5, G6, G7, G8
      COMMON /STATES/ DL, UL, PL, CL, DR, UR, PR, CR

      QUSER = 2.0

      ! Compute guess pressure from PVRS Riemann solver

      CUP  = 0.25*(DL + DR)*(CL + CR)
      PPV  = 0.5*(PL + PR) + 0.5*(UL - UR)*CUP
      PPV  = AMAX1(0.0, PPV)
      PMIN = AMIN1(PL,  PR)
      PMAX = AMAX1(PL,  PR)
      QMAX = PMAX/PMIN

      IF(QMAX.LE.QUSER.AND.(PMIN.LE.PPV.AND.PPV.LE.PMAX))THEN
        ! Select PVRS Riemann solver
        PM = PPV
      ELSE
        IF(PPV.LT.PMIN)THEN
          ! Select Two-Rarefaction Riemann solver
          PQ  = (PL/PR)**G1
          UM  = (PQ*UL/CL + UR/CR + G4*(PQ - 1.0))/(PQ/CL + 1.0/CR)
          PTL = 1.0 + G7*(UL - UM)/CL
          PTR = 1.0 + G7*(UM - UR)/CR
          PM  = 0.5*(PL*PTL**G3 + PR*PTR**G3)
        ELSE
          ! Select Two-Shock Riemann solver with PVRS as estimate
          GEL = SQRT((G5/DL)/(G6*PL + PPV))
          GER = SQRT((G5/DR)/(G6*PR + PPV))
          PM  = (GEL*PL + GER*PR - (UR - UL))/(GEL + GER)
        ENDIF
      ENDIF

      RETURN
      END

      SUBROUTINE PREFUN(F, FD, P, DK, PK, CK)

      IMPLICIT NONE

      ! Declaration of variables

      REAL AK, BK, CK, DK, F, FD, P, PK, PRAT, QRT
      REAL GAMMA, G1, G2, G3, G4, G5, G6, G7, G8

      COMMON /GAMMAS/ GAMMA, G1, G2, G3, G4, G5, G6, G7, G8

      IF(P.LE.PK)THEN
        ! Rarefaction wave
        PRAT = P/PK
        F = G4*CK*(PRAT**G1 - 1.0)
        FD = (1.0/(DK*CK))*PRAT**(-G2)
      ELSE
        ! Shock wave
        AK = G5/DK
        BK = G6*PK
        QRT = SQRT(AK/(BK + P))
        F = (P - PK)*QRT
        FD = (1.0 - 0.5*(P - PK)/(BK + P))*QRT
      ENDIF

      RETURN
      END

      SUBROUTINE SAMPLE(PM, UM, S, D, U, P)

      IMPLICIT NONE

      ! Declaration of variables
      REAL DL, UL, PL, CL, DR, UR, PR, CR
      REAL GAMMA, G1, G2, G3, G4, G5, G6, G7, G8
      REAL C, CML, CMR, D, P, PM, PML, PMR, S
      REAL SHL, SHR, SL, SR, STL, STR, U, UM

      COMMON /GAMMAS/ GAMMA, G1, G2, G3, G4, G5, G6, G7, G8
      COMMON /STATES/ DL, UL, PL, CL, DR, UR, PR, CR

      IF(S.LE.UM)THEN

        IF(PM.LE.PL)THEN

          SHL = UL - CL

          IF(S.LE.SHL)THEN

            D = DL
            U = UL
            P = PL
          ELSE
            CML = CL*(PM/PL)**G1
            STL = UM - CML

            IF(S.GT.STL)THEN

              D = DL*(PM/PL)**(1.0/GAMMA)
              U = UM
              P = PM
            ELSE

              U = G5*(CL + G7*UL + S)
              C = G5*(CL + G7*(UL - S))
              D = DL*(C/CL)**G4
              P = PL*(C/CL)**G3
            ENDIF
          ENDIF
        ELSE
        
          ! Left shock

          PML = PM/PL
          SL = UL - CL*SQRT(G2*PML + G1)

          IF(S.LE.SL)THEN

            D = DL
            U = UL
            P = PL
          ELSE

            D = DL*(PML + G6)/(PML*G6 + 1.0)
            U = UM
            P = PM
          ENDIF
        ENDIF
      ELSE

        IF(PM.GT.PR)THEN
          ! Right shock

          PMR = PM/PR
          SR  = UR + CR*SQRT(G2*PMR + G1)

          IF(S.GE.SR)THEN

            D = DR
            U = UR
            P = PR
          ELSE
          
            D = DR*(PMR + G6)/(PMR*G6 + 1.0)
            U = UM
            P = PM
          ENDIF
        ELSE

          ! Right rarefaction

          SHR = UR + CR

          IF(S.GE.SHR)THEN

            D = DR
            U = UR
            P = PR
          ELSE
            CMR = CR*(PM/PR)**G1
            STR = UM + CMR

            IF(S.LE.STR)THEN

              D = DR*(PM/PR)**(1.0/GAMMA)
              U = UM
              P = PM
            ELSE

              U = G5*(-CR + G7*UR + S)
              C = G5*(CR - G7*(UR - S))
              D = DR*(C/CR)**G4
              P = PR*(C/CR)**G3
            ENDIF
          ENDIF
        ENDIF
      ENDIF
      RETURN 
      END
